<?php

use Drupal\Component\Utility\Html;
use Drupal\Core\Render\Markup;
use \Drupal\node\Entity\Node;
use \Drupal\views\ViewExecutable;

/**
 * @file
 * Contains alter_view.module.
 */

/**
 * Implements hook_views_pre_render
 * modify solr searches
 * show language specific fields and sorts
 * example description_en when English is the current language
 * and description_fr when French is the current language
 */
function alter_view_views_pre_render(ViewExecutable $view) {

  $language_manager = \Drupal::service('language_manager');
  $currentLang = $language_manager->getCurrentLanguage()->getId();
  $field_to_disable = $currentLang == 'en' ? 'fr' : 'en';

  $views = [
    'pd_core_ati',
    'pd_core_ati_details',
  ];

  if (in_array($view->id(), $views)) {

    // disable fields in other language
    foreach ($view->field as $field) {
      if (strpos($field->field, '_' . $field_to_disable) !== FALSE) {
        unset($view->field[$field->field]);
      }
    }

    // disable sorts in other language only for the list views
    if (strpos($view->id(), '_details') === FALSE
      && is_array($view->exposed_widgets)
      && array_key_exists('sort_by', $view->exposed_widgets)
      && array_key_exists('#options', $view->exposed_widgets['sort_by'])) {

      foreach ($view->exposed_widgets['sort_by']['#options'] as $key => $value) {
        if (strpos($key, '_' . $field_to_disable) !== FALSE) {
          unset($view->exposed_widgets['sort_by']['#options'][$key]);
        }
      }
    }
  }
}

/**
 * Implements template_preprocess_views_view().
 * This function removes the webform and privacy statement block from the page in the case of an ATI record
 * displaying 'no records'.
 */
function alter_view_preprocess_views_view(&$variables) {
  $view = $variables['view'];
  if ($view->id() === 'pd_core_ati_details') {
    if ($view->result &&
      $view->result[0]->_item->getField('pages') &&
      $view->result[0]->_item->getField('pages')->getValues() &&
      $view->result[0]->_item->getField('pages')->getValues()[0] == "0") {
        unset($variables['footer']['area_text_custom_1'], $variables['footer']['entity_webform'], $variables['footer']['entity_block_content']);
    }
  }
}

/**
 * Implements template_preprocess_views_view_field().
 */
function alter_view_preprocess_views_view_field(&$variables) {
    $fields = ['comments_en','comments_fr', 'summary_en', 'summary_fr'];
    if ($variables['view']->id() == 'pd_core_ati_details'
      && in_array($variables['field']->field, $fields) ) {

      $variables['output'] = preg_replace(
        '@(https?://([-\w\.]+[-\w])+(:\d+)?(/([\w/_\.#-]*(\?\S+)?[^\.\s])?)?)@',
        '<a href="$1" target="_blank" rel="nofollow">$1</a>',
        $variables['output']);

      $variables['output'] = Markup::create(
        Html::decodeEntities($variables['output'])
        );
  }
}

/**
 * Implements hook_page_attachments().
 * This function add meta tag for robots on the search pages
 */
function alter_view_page_attachments(array &$page) {
  $current_path = \Drupal::service('path.current')->getPath();
  $path_alias = \Drupal::service('path_alias.manager')->getAliasByPath($current_path);

  if ( $path_alias && strpos($path_alias,'/search/') !== false ) {
    $metaRobots = [
      '#tag' => 'meta',
      '#attributes' => [
        'property' => 'robots',
        'content' => 'noindex, nofollow, noarchive, nosnippet, noodp, noydir, noimageindex',
      ],
    ];

    $page['#attached']['html_head'][] = [$metaRobots, 'robots'];
  }

}